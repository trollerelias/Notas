{"ast":null,"code":"import Swal from 'sweetalert2';\nimport { firebase, googleAuthProvider } from '../firebase/firebase-config';\nimport { types } from '../types/types';\nimport { startLoading, finishLoading } from './ui';\nimport { noteLogout } from './notes';\nexport const startLoginEmailPassword = (email, password) => {\n  return dispatch => {\n    dispatch(startLoading());\n    return firebase.auth().signInWithEmailAndPassword(email, password).then(({\n      user\n    }) => {\n      dispatch(login(user.uid, user.displayName));\n      dispatch(finishLoading());\n    }).catch(e => {\n      console.log(e);\n      dispatch(finishLoading());\n      Swal.fire('Error', e.message, 'error');\n    });\n  };\n};\nexport const startRegisterWithEmailPasswordName = (email, password, name) => {\n  return dispatch => {\n    firebase.auth().createUserWithEmailAndPassword(email, password).then(async ({\n      user\n    }) => {\n      await user.updateProfile({\n        displayName: name\n      });\n      dispatch(login(user.uid, user.displayName));\n    }).catch(e => {\n      console.log(e);\n      Swal.fire('Error', e.message, 'error');\n    });\n  };\n};\nexport const startGoogleLogin = () => {\n  return dispatch => {\n    firebase.auth().signInWithPopup(googleAuthProvider).then(({\n      user\n    }) => {\n      dispatch(login(user.uid, user.displayName));\n    });\n  };\n};\nexport const login = (uid, displayName) => ({\n  type: types.login,\n  payload: {\n    uid,\n    displayName\n  }\n});\nexport const startLogout = () => {\n  return async dispatch => {\n    await firebase.auth().signOut();\n    dispatch(logout());\n    dispatch(noteLogout());\n  };\n};\nexport const logout = () => ({\n  type: types.logout\n});","map":{"version":3,"sources":["C:/Users/User/OneDrive/Escritorio/react-redux-journal-app-0.21.0/src/actions/auth.js"],"names":["Swal","firebase","googleAuthProvider","types","startLoading","finishLoading","noteLogout","startLoginEmailPassword","email","password","dispatch","auth","signInWithEmailAndPassword","then","user","login","uid","displayName","catch","e","console","log","fire","message","startRegisterWithEmailPasswordName","name","createUserWithEmailAndPassword","updateProfile","startGoogleLogin","signInWithPopup","type","payload","startLogout","signOut","logout"],"mappings":"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","sourcesContent":["import Swal from 'sweetalert2';\n\nimport { firebase, googleAuthProvider } from '../firebase/firebase-config';\nimport { types } from '../types/types';\nimport { startLoading, finishLoading } from './ui';\nimport { noteLogout } from './notes';\n\n\nexport const startLoginEmailPassword = (email, password) => {\n    return (dispatch) => {\n\n        dispatch( startLoading() );\n        \n        \n        return firebase.auth().signInWithEmailAndPassword( email, password )\n            .then( ({ user }) => {\n                dispatch(login( user.uid, user.displayName ));\n\n                dispatch( finishLoading() );\n            })\n            .catch( e => {\n                console.log(e);\n                dispatch( finishLoading() );\n                Swal.fire('Error', e.message, 'error');\n            })\n\n    }\n}\n\nexport const startRegisterWithEmailPasswordName = ( email, password, name ) => {\n    return ( dispatch ) => {\n\n        firebase.auth().createUserWithEmailAndPassword( email, password )\n            .then( async({ user }) => {\n\n                await user.updateProfile({ displayName: name });\n\n                dispatch(\n                    login( user.uid, user.displayName )\n                );\n            })\n            .catch( e => {\n                console.log(e);\n                Swal.fire('Error', e.message, 'error');\n            })\n\n    }\n}\n\n\n\nexport const startGoogleLogin = () => {\n    return ( dispatch ) => {\n\n        firebase.auth().signInWithPopup( googleAuthProvider )\n            .then( ({ user }) => {\n                dispatch(\n                    login( user.uid, user.displayName )\n                )\n            });\n\n    }\n}\n\n\nexport const login = (uid, displayName) => ({\n    type: types.login,\n    payload: {\n        uid,\n        displayName\n    }\n});\n\n\nexport const startLogout = () => {\n    return async( dispatch ) => {\n        await firebase.auth().signOut();\n\n        dispatch( logout() );\n        dispatch( noteLogout() );\n    }\n}\n\n\nexport const logout = () => ({\n    type: types.logout\n})\n\n\n"]},"metadata":{},"sourceType":"module"}